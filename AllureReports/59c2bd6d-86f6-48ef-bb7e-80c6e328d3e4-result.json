{"name": "test_AddCustomer", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=121.0.6167.140)\nStacktrace:\n\tGetHandleVerifier [0x00007FF71C795E42+3538674]\n\t(No symbol) [0x00007FF71C3B4C02]\n\t(No symbol) [0x00007FF71C26599D]\n\t(No symbol) [0x00007FF71C2AD406]\n\t(No symbol) [0x00007FF71C2A1950]\n\t(No symbol) [0x00007FF71C2CF0AA]\n\t(No symbol) [0x00007FF71C2A124A]\n\t(No symbol) [0x00007FF71C2CF2C0]\n\t(No symbol) [0x00007FF71C2EBDE3]\n\t(No symbol) [0x00007FF71C2CEE53]\n\t(No symbol) [0x00007FF71C29F514]\n\t(No symbol) [0x00007FF71C2A0631]\n\tGetHandleVerifier [0x00007FF71C7C6CAD+3738973]\n\tGetHandleVerifier [0x00007FF71C81C506+4089270]\n\tGetHandleVerifier [0x00007FF71C814823+4057299]\n\tGetHandleVerifier [0x00007FF71C4E5C49+720121]\n\t(No symbol) [0x00007FF71C3C126F]\n\t(No symbol) [0x00007FF71C3BC304]\n\t(No symbol) [0x00007FF71C3BC432]\n\t(No symbol) [0x00007FF71C3ABD04]\n\tBaseThreadInitThunk [0x00007FFB3228257D+29]\n\tRtlUserThreadStart [0x00007FFB334EAA58+40]", "trace": "self = <testCases.test_AddCustomer.Test_AddCutomerClass object at 0x000001B9DFD54190>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"af124e9006a7873c95379168e49e4dfd\")>\n\n    def test_AddCustomer(self,setup):\n        self.log.info(\"Test_case test_AddCustomer is started\")\n        self.driver = setup\n        self.log.info(\"Opening browser and navigating to demo_nop_com\")\n        # #\n        # self.TP = Test_Login()   #assinge variable to Test_Login() class from test_UserLogin.py file\n        # #\n        # self.TP.test_user_login_002(setup)   #call test_user_login_002() method from test_UserLogin.py file\n    \n        self.lp = LoginClass(self.driver)\n        self.log.info(\"Entering Email\")\n        self.lp.Enter_Email(self.Email)\n    \n        self.log.info(\"Entering Password - \")\n        self.lp.Enter_Password(self.Password)\n    \n        self.log.info(\"Click on login button\")\n        self.lp.Click_Login()\n    \n        self.log.info(\"Add Customer is Started\")\n        self.AC = AddCustomerClass(self.driver)\n    \n        self.log.info(\"Click on Customer Menu\")\n        self.AC.Click_CustomerMenu()\n    \n        self.log.info(\"Click on CustomerSub Menu\")\n>       self.AC.Click_CustomerSubMenu()\n\ntestCases\\test_AddCustomer.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\AddCustomerPage.py:33: in Click_CustomerSubMenu\n    self.driver.find_element(By.XPATH, self.click_Customersuboption_Xpath).click()\nC:\\Users\\dell\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\dell\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\dell\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B9DFD7C550>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF71C3ABD04]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB3228257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFB334EAA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=121.0.6167.140)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF71C795E42+3538674]\nE       \t(No symbol) [0x00007FF71C3B4C02]\nE       \t(No symbol) [0x00007FF71C26599D]\nE       \t(No symbol) [0x00007FF71C2AD406]\nE       \t(No symbol) [0x00007FF71C2A1950]\nE       \t(No symbol) [0x00007FF71C2CF0AA]\nE       \t(No symbol) [0x00007FF71C2A124A]\nE       \t(No symbol) [0x00007FF71C2CF2C0]\nE       \t(No symbol) [0x00007FF71C2EBDE3]\nE       \t(No symbol) [0x00007FF71C2CEE53]\nE       \t(No symbol) [0x00007FF71C29F514]\nE       \t(No symbol) [0x00007FF71C2A0631]\nE       \tGetHandleVerifier [0x00007FF71C7C6CAD+3738973]\nE       \tGetHandleVerifier [0x00007FF71C81C506+4089270]\nE       \tGetHandleVerifier [0x00007FF71C814823+4057299]\nE       \tGetHandleVerifier [0x00007FF71C4E5C49+720121]\nE       \t(No symbol) [0x00007FF71C3C126F]\nE       \t(No symbol) [0x00007FF71C3BC304]\nE       \t(No symbol) [0x00007FF71C3BC432]\nE       \t(No symbol) [0x00007FF71C3ABD04]\nE       \tBaseThreadInitThunk [0x00007FFB3228257D+29]\nE       \tRtlUserThreadStart [0x00007FFB334EAA58+40]\n\nC:\\Users\\dell\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "45529c9b-b899-48b2-8e1b-4adf0b11e627-attachment.txt", "type": "text/plain"}], "start": 1707105621436, "stop": 1707105628098, "uuid": "1cb5df60-8580-4a6a-ac0d-8c32a6261a10", "historyId": "03ff2e775c1ca93e52e3aa183b4dbd7d", "testCaseId": "03ff2e775c1ca93e52e3aa183b4dbd7d", "fullName": "testCases.test_AddCustomer.Test_AddCutomerClass#test_AddCustomer", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_AddCustomer"}, {"name": "subSuite", "value": "Test_AddCutomerClass"}, {"name": "host", "value": "DESKTOP-UU0D5DC"}, {"name": "thread", "value": "17928-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_AddCustomer"}]}